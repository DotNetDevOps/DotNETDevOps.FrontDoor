# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

name: '$(date:yyyyMMdd)$(rev:-rr)'
trigger:
  batch: true
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - functions/*
    - apps/DotNETDevOps.FrontDoor.RouterApp/*
    - azure-pipelines.yml

pr:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - functions/*
    - apps/DotNETDevOps.FrontDoor.RouterApp/*
    - azure-pipelines.yml



stages:
- stage: Build
  dependsOn: []
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-2019'

    variables:
      buildConfiguration: 'Release'


    steps:
    # .NET Core
    # Restore NuGet packages.
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: config
        nugetConfigPath: nuget.config # you should always have a NuGet.config file!
        #verbosityRestore: 'detailed' # Options: quiet, minimal, normal, detailed, diagnostic
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: '**/*.csproj'
        configuration: '$(buildConfiguration)'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'pack'
        configuration: '$(buildConfiguration)'
        packagesToPack: 'src/**/*.csproj' # Required when command == pack
        packDirectory: '$(build.artifactStagingDirectory)' # Optional
        #nobuild: false # Optional
        #versioningScheme: 'off' # Options: off, byPrereleaseNumber, byEnvVar, byBuildNumber
        #versionEnvVar: # Required when versioningScheme == byEnvVar
        #majorVersion: '1' # Required when versioningScheme == byPrereleaseNumber
        #minorVersion: '0' # Required when versioningScheme == byPrereleaseNumber
        #patchVersion: '0' # Required when versioningScheme == byPrereleaseNumber
        #buildProperties: # Optional
        #verbosityPack: 'detailed' # Options: quiet, minimal, normal, detailed, diagnostic
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: false
        projects: 'functions/**/*.csproj'
        configuration: '$(buildConfiguration)'
        arguments: '--output $(Build.ArtifactStagingDirectory)'
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'drop'
        targetPath: '$(Build.ArtifactStagingDirectory)'

- stage: 'DistributeFunctions'
  dependsOn: 'Build'
  jobs:
  - job: build

    pool:
      vmImage: 'windows-2019'

    steps:
    - task: DownloadPipelineArtifact@1
      inputs:
        buildType: 'current'
        artifactName: 'drop'
        targetPath: '$(System.ArtifactsDirectory)'

    - task: VersionReaderTask@1
      inputs:
        searchPattern: 'functions/DotNETDevOps.FrontDoor.RouterFunction/*.csproj'
    - task: AzureFileCopy@3
      inputs:
        SourcePath: '$(Build.ArtifactStagingDirectory)/DotNETDevOps.FrontDoor.RouterFunction.zip'
        azureSubscription: 'Microsoft Partner Network(0fd7128b-5305-49da-a400-b7a37feb271c)'
        Destination: 'AzureBlob'
        storage: 'dotnetdevops'
        ContainerName: 'functions'
        BlobPrefix: 'DotNETDevOps.FrontDoor.RouterFunction/$(version)-ci-$(Build.BuildNumber)/'
   
    - task: VersionReaderTask@1
      inputs:
        searchPattern: 'functions/DotNETDevOps.FrontDoor.ApiFunction/*.csproj'
    - task: AzureFileCopy@3
      inputs:
        SourcePath: '$(Build.ArtifactStagingDirectory)/DotNETDevOps.FrontDoor.ApiFunction.zip'
        azureSubscription: 'Microsoft Partner Network(0fd7128b-5305-49da-a400-b7a37feb271c)'
        Destination: 'AzureBlob'
        storage: 'dotnetdevops'
        ContainerName: 'functions'
        BlobPrefix: 'DotNETDevOps.FrontDoor.ApiFunction/$(version)-ci-$(Build.BuildNumber)/'

    - task: VersionReaderTask@1
      inputs:
        searchPattern: 'functions/DotNETDevOps.FrontDoor.FrontFunction/*.csproj'
    - task: AzureFileCopy@3
      inputs:
        SourcePath: '$(Build.ArtifactStagingDirectory)/DotNETDevOps.FrontDoor.FrontFunction.zip'
        azureSubscription: 'Microsoft Partner Network(0fd7128b-5305-49da-a400-b7a37feb271c)'
        Destination: 'AzureBlob'
        storage: 'dotnetdevops'
        ContainerName: 'functions'
        BlobPrefix: 'DotNETDevOps.FrontDoor.FrontFunction/$(version)-ci-$(Build.BuildNumber)/'




- stage: 'CIPublishLibs'
  dependsOn: 'Build'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  jobs:
  - job: Build   

    pool:
      vmImage: 'windows-2019'
    
    steps:
    - task: DownloadPipelineArtifact@1
      inputs:
        buildType: 'current'
        artifactName: 'drop'
        targetPath: '$(System.ArtifactsDirectory)'

    - task: UpdateNugetPackageVersionsTask@1
      inputs:
        PackageFolder: '$(build.artifactStagingDirectory)'
        PackageFeatureName: 'pre'
           
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'drop-ci'
        targetPath: '$(Build.ArtifactStagingDirectory)'

    - task: NuGetCommand@2
      inputs:
        command: 'push'
        feedsToUse: 'select'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'DotNET DevOps Myget'
        versioningScheme: 'off'


- stage: 'CDReleaseLibs'
  dependsOn: 'Build'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: Build    

    pool:
      vmImage: 'windows-2019'
    
    steps:
    - task: DownloadPipelineArtifact@1
      inputs:
        buildType: 'current'
        artifactName: 'drop'
        targetPath: '$(System.ArtifactsDirectory)'

    - task: NuGetCommand@2
      inputs:
        command: 'push'
        feedsToUse: 'select'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'Nuget'
        versioningScheme: 'off'

- stage: Publish
  dependsOn: 'Build'
  condition: and(succeeded('Build'), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  jobs:
  - deployment: DeployApiFunction
    pool:
      vmImage: 'windows-2019'
    variables:
      buildConfiguration: 'Release'
    environment: 'DotNETDevOps Front Door'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureRmWebAppDeployment@4
              inputs:
                azureSubscription: 'Microsoft Partner Network(0fd7128b-5305-49da-a400-b7a37feb271c)'
                appType: 'functionApp'
                WebAppName: 'frontdoor-api'
                package: '$(Pipeline.Workspace)/**/DotNETDevOps.FrontDoor.ApiFunction.zip'
                enableCustomDeployment: true
                DeploymentType: 'runFromZip'
                appSettings: '-DurableTaskHubName FrontDoorApiHub'
  - deployment: DeployFrontFunction
    pool:
      vmImage: 'windows-2019'
    variables:
      buildConfiguration: 'Release'
    environment: 'DotNETDevOps Front Door'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureRmWebAppDeployment@4
              inputs:
                azureSubscription: 'Microsoft Partner Network(0fd7128b-5305-49da-a400-b7a37feb271c)'
                appType: 'functionApp'
                WebAppName: 'frontdoor-front'
                package: '$(Pipeline.Workspace)/**/DotNETDevOps.FrontDoor.FrontFunction.zip'
                enableCustomDeployment: true
                DeploymentType: 'runFromZip'
  - deployment: DeployRouterFunction
    pool:
      vmImage: 'windows-2019'
    variables:
      buildConfiguration: 'Release'
    environment: 'DotNETDevOps Front Door'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureRmWebAppDeployment@4
              inputs:
                azureSubscription: 'Microsoft Partner Network(0fd7128b-5305-49da-a400-b7a37feb271c)'
                appType: 'functionApp'
                WebAppName: 'frontdoor-router'
                package: '$(Pipeline.Workspace)/**/DotNETDevOps.FrontDoor.RouterFunction.zip'
                enableCustomDeployment: true
                DeploymentType: 'runFromZip'
